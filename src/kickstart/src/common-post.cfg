#!/bin/bash
PATH=/bin:/usr/bin:/sbin:/usr/sbin:$PATH

ask () {
	echo >&2
	echo -n "$1 [$2] ? " >&2
	read res
	[ -z "$res" ] && res="$2"

	if [ ."$res" = .'!' ]
	then
		(
			echo
			echo "Starting interactive shell, type 'exit' when done"
			sh
		) >&2
		# re-do the prompt
		ask "$@"
	else
		echo "$res"
	fi
}

confirm () {
	res=$(ask "$1 (y/n)" "$2")
	case "$res" in
	[yYjJ]*) true ;;
	*) false ;;
	esac
}

cmdline_val () {
	Res=$(cat /proc/cmdline | sed -n 's/.*'"$1"'=\([^ ]*\).*/\1/p')
	if [ -z "$Res" ]
	then
		echo "$2"
	else
		echo "$Res"
	fi
}

check_sys_time () {
	while true
	do
		echo
		echo "Please verify the system time and date:"
		echo "    Local time:           "`date`
		echo "    Universal time (UTC): "`TZ=UTC date`
		echo
		echo "If the time or time zone is wrong, please correct it now using"
		echo "tools such as 'date', 'hwclock', or 'tzselect' as appropriate."

		confirm "Is the time correct" "y" && break
		(
			echo
			echo "Starting interactive shell, type 'exit' when done"
			sh
		) >&2
	done
}

get_rpms() {
	# *** FIXME: alternative package locations, ie CD-R or USB storage
	BASE="$RPM_SITE"
	while true
	do
		echo
		echo "Need to install the certification RPM and updated RPM packages:"
		echo "$RPMS_NEEDED"
		echo
		echo "Supply a web URL or a local (absolute) directory name."
		echo
		echo "If you need to mount a device containing the files,"
		echo "enter '!' and RETURN to get a shell prompt."
	
		BASE="$(ask "Location" "$BASE")"
	
		for RPM in $RPMS_NEEDED
		do
			if expr "$BASE" : / >/dev/null
			then
				cp -v "$BASE/$RPM" .
			else
				wget --tries=2 -c "$BASE/$RPM"
			fi
		done
	
		Missing=
		for RPM in $RPMS_NEEDED
		do
			[ ! -f "$RPM" ] && Missing="$Missing
$RPM"
		done
		[ -z "$Missing" ] && break
		RPMS_NEEDED="$Missing"
	done
	
	Bad=
	for RPM in *.rpm
	do
       		if ! rpm --checksig $RPM | grep -q 'pgp .* OK' 
		then
	        	echo "WARNING: no valid signature: $RPM"
			Bad=y
		 fi
	done
	
	[ ! -z "$Bad" ] && {
       		confirm "Install RPMs without valid signatures (not recommended)" "n" || {
	        	die "Installation aborted."
	
		}
	}
}


die () {
	echo >&2 "FATAL: $*"
	echo >&2
	echo >&2 "Setting up the evaluated configuration failed."
	echo >&2
	confirm "Reboot" "y" || sleep 999999999
	exit 1
}

# save TTY settings and file descriptors and redirect i/o to console
exec 10<&0 11>&1 12>&2
exec </dev/tty >/dev/tty 2>&1
# does not work with EFI
#STTY_SAVE=$(stty -g)
#stty sane
#reset || clear
clear

echo "*** Common Criteria configuration kickstart ***"
echo

# KVM RHEL5.6 requires this split as there is no MLS mode
cat /etc/redhat-release | grep -q 5 >/dev/null 2>&1
if [ "$?" -eq 0 ]
then
	PROFILE="base"
else
	while true 
	do
		PROFILE="$(ask "Operational mode (base or mls)" "base")"
		if [ ."$PROFILE" = ."mls" -o ."$PROFILE" = ."base" ] 
		then
			break
		else
			confirm "Profile must be "base" or "mls" - try again?" "y" || die "Installation aborted."
		fi
	done
fi

check_sys_time
		
/etc/init.d/network start

RPMTMP=/root/cc-rpms
mkdir -p $RPMTMP
cd $RPMTMP

#rpm --import /usr/share/rhn/RPM-GPG-KEY
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release

while true
do
	get_rpms
	# use "--replacefiles" to prevent creating .rpmnew files
	if [ "$(ls *.rpm)" ] && rpm -Uvh --replacefiles *.rpm 
	then
		break
	else
		confirm "RPM upgrade failed - try again?" "y" || die "Installation aborted."
	fi
done

if [ ."$PROFILE" = ."mls" ] 
then
	echo "Switching SELinux to MLS mode..."
	lokkit -q -n --selinuxtype=mls
	setenforce 0
	load_opts=""
	[ $(cat /etc/redhat-release | grep -q 5 >/dev/null 2>&1) ] && load_opts="-b"
	load_policy $load_opts 2>&1 | grep -v no.longer.in.policy

	echo "Fixing file labels..."
	# FIXME: fixfiles ignores allegedly R/O filesystems due to bad /etc/mtab ?
	cat /proc/mounts > /etc/mtab
	fixfiles -F restore
	restorecon -r /root /home # FIXME: workaround for home dirs

	# FIXME: should not need /.autorelabel after fixfiles
	#echo "Will relabel file system on next boot."
	#echo "If booting fails, add 'enforcing=0' to the kernel command line."
	#touch /.autorelabel
else
	echo "Using default SELinux configuration."
fi

# all specific settings concerning virtual machines go in here
if [ -f "/etc/libvirt/libvirtd.conf" ]
then
	echo "Setting up prerequisites for virtual machines..."

	# only create the libvirt group if it does not yet exist
	# TODO: this code for generating the libvirt group shall
	#       be removed after the SPEC file for libvirtd is
	#       modified to add the group during install
	check=$(cat /etc/group | grep "libvirt:" | cut -d":" -f1)
	if [ x"$check" != x"libvirt" ]
	then

		libvirtgid=200
		libvirtgidmax=220
		while [ $libvirtgid -lt $libvirtgidmax ]
		do
			found=0
			for j in $(cat /etc/group | cut -d":" -f3)
			do
				[ "$libvirtgid" -eq "$j" ] && { found=1; break; }
			done
			[ "$found" -eq "0" ] && break
			let libvirtgid=$libvirtgid+1
		done
		[ $libvirtgid -ge $libvirtgidmax ] && die "Failed to find free GID for group libvirt."
		groupadd -g $libvirtgid libvirt
	fi
fi
 
echo
echo "Please enter the password for the root account."
while ! passwd root; do :; done

while true
do
	echo
	echo "Create an administrative user account."
	Name="$(ask "Real name (First Last)")"
	Uid="$(echo "$Name" | sed 's/^\(.\).* \(.*\)$/\1\2/' | tr A-Z a-z)"
	Uid="$(ask "Userid" "$Uid")"

	if useradd -m -c "$Name" -G wheel "$Uid"
	then
		while ! passwd "$Uid"; do :; done
		chage -m 1 -M 60 -W 7 "$Uid"

		if [ ."$PROFILE" = ."mls" ]
		then
			# set SystemLow-SystemHigh range
			# FIXME: using numeric range, mcstransd is not available 
			semanage login -a -s staff_u -r s0-s15:c0.c1023 "$Uid"
			restorecon -r "/home/$Uid"
		fi
	else
		echo "Warning: adding user unsuccessful, please try again."
	fi

	confirm "Add more administrative users" "n" || break
done

while true
do
	if cc-config -a --"$PROFILE"
	then
		break
	else
		echo "Setting up evaluated config failed, see the"
		echo "/var/log/cc-config.log file for details."
		echo
		echo "Your system is NOT in the evaluated configuration."
		echo 
		echo "Enter '!' and RETURN to get a shell prompt to fix the issue."
		confirm "Try again" "y" || break
	fi
done

# restore file descriptors and TTY
# does not work with EFI
#stty $STTY_SAVE
exec <&10 >&11 2>&12
