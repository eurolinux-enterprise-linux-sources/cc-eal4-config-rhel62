#!/bin/sh
PATH=/bin:/usr/bin:/sbin:/usr/sbin:$PATH

set -x

# XXX touching the file here is used to circumvent some strange behavior
#     some systems where this file does not seem to be generated
touch /tmp/cc-disks.cfg

echo_user () {
	echo >/dev/tty "$@"
}

ask () {
	echo_user
	echo_user -n "$1 [$2] ? "
	read res </dev/tty
	[ -z "$res" ] && res="$2"

	if [ ."$res" = .'!' ]
	then
		echo_user
		echo_user "Starting interactive shell, type 'exit' when done"
		sh </dev/tty >/dev/tty 2>&1
		# re-do the prompt
		ask "$@"
	else
		echo "$res"
	fi
}

confirm () {
	res=$(ask "$1 (y/n)" "$2")
	case "$res" in
	[yYjJ]*) true ;;
	*) false ;;
	esac
}

cmdline_val () {
	Res=$(cat /proc/cmdline | sed -n 's/.*'"$1"'=\([^ ]*\).*/\1/p')
	if [ -z "$Res" ]
	then
		echo "$2"
	else
		echo "$Res"
	fi
}

die () {
	echo_user "FATAL: $*"
	exit 1
}

gen_network() {
	echo -n "network --device $IFACE --bootproto static"
	[ ! -z "$IP"   ] && echo -n " --ip $IP"
	[ ! -z "$MASK" ] && echo -n " --netmask $MASK"
	[ ! -z "$GATE" ] && echo -n " --gateway $GATE"
	[ ! -z "$DNS"  ] && echo -n " --nameserver $DNS"
	echo " --hostname $NAME"
}

gen_instsrc () {
	local Src
	Src="$INSTSRC"
	case "$Src" in
		cdrom*)	Src="cdrom"
			;;
		nfs:*)	Src=$(echo "$Src" | sed 's/nfs:\(.*\):\(.*\)/nfs --server=\1 --dir=\2/')
			;;
		hd:*)	Src=$(echo "$Src" | sed 's/hd:\/\/\([^\/]*\)\/\(.*\)/harddrive --partition=\1 --dir=\2/')
			;;
		http:*|ftp:*)
			Src="url --url $Src"
			;;
		*)
			echo_user "unsupported installation source '$Src'"
			echo_user "Anaconda will proceed, but with wrong partitioning schema"
			echo_user "Restart installation and provide proper URL as explained in ECG"
			sleep 30
			
			die "unsupported installation source '$Src'"
			;;
	esac
	echo "$Src" 
}

gen_partitioning () {
	# Input variables:
	#	DISKS_INST - comma separated list of disks

	# First (or only) disk for boot loader
	DISK1=$(echo $DISKS_INST | sed 's/,.*//')
	FSTYPE="ext4"
	# RHEL 5 has a 2.6.18 kernel - /etc/redhat-release it not yet available
	$(uname -r | grep -q 2.6.18) && FSTYPE="ext3"

	echo "# Automatically generated by Common Criteria configuration kickstart
#
# Refer to the instructions for the 'part' command for more information:
#
# FIXME: update link
# http://www.redhat.com/docs/manuals/enterprise/RHEL-4-Manual/sysadmin-guide/s1-kickstart2-options.html

## Wipe all partitions on the selected disk
clearpart --all --drives=$DISKS_INST

"

if [ -n "$EFI" ]
then
	echo "## Set up EFI boot partition
part /boot/efi --fstype vfat --size=500 --ondisk=$DISK1
"
fi
echo "## Set up boot and swap partitions as needed
@@ppc64@@ part prepboot --fstype \"PPC PReP Boot\" --size=4 --ondisk=$DISK1
@@ppc64@@ part /boot --fstype $FSTYPE --size=500 --ondisk=$DISK1
@@x86_64@@ part /boot --fstype $FSTYPE --size=500 --ondisk=$DISK1
@@s390x@@ part /boot --fstype $FSTYPE --size=500 --ondisk=$DISK1
@@i386@@ part /boot --fstype $FSTYPE --size=500 --ondisk=$DISK1
@@i386-WS@@ part /boot --fstype $FSTYPE --size=500 --ondisk=$DISK1
"

echo "##### LVM setup - see below for optional non-LVM scheme
"

	ALL_PVS=""
	for DISK in $(echo $DISKS_INST | sed 's/,/ /g')
	do
		PVNAME="pv.$PV_ID"
		echo "part $PVNAME --size=1 --grow --ondisk=$DISK"

		[ ! -z "$ALL_PVS" ] && ALL_PVS="$ALL_PVS"' '
		ALL_PVS="$ALL_PVS$PVNAME"

		PV_ID=$(expr $PV_ID + 1)
	done

echo "
volgroup $VGNAME --pesize=32768 $ALL_PVS

## Required partitions, you MAY resize these as appropriate
logvol / --fstype $FSTYPE --name=root --vgname=$VGNAME --size=2048 --grow $ENC
logvol swap --fstype swap --name=LvSwap --vgname=$VGNAME --size=256 --grow --maxsize=512 $ENC
logvol /var/log --fstype $FSTYPE --name=varlog --vgname=$VGNAME --size=200 --grow --maxsize=2048 --fsoptions="defaults,nodev,noexec,nosuid" $ENC

## Optional partitions, you MAY (de)activate and resize as appropriate
logvol /home --fstype $FSTYPE --name=home --vgname=$VGNAME --size=50 --grow --maxsize=10000 --fsoptions="defaults,nodev" $ENC
logvol /var --fstype $FSTYPE --name=var --vgname=$VGNAME --size=500 --grow --maxsize=50000 $ENC
logvol /var/log/audit --fstype $FSTYPE --name=audit --vgname=$VGNAME --size=2000 $ENC
logvol /tmp --fstype $FSTYPE --name=temp --vgname=$VGNAME --size=1000 $ENC

## Optional: you MAY encrypt all partitions (except the boot partition).
## Append the following options:
# --encrypted
#    Specify that this logical volume should be encrypted. 
# --passphrase=
#    Specify the passphrase to use when encrypting this logical volume.
#    Without the above --encrypted option, this option does nothing.
#    If no passphrase is specified, the default system-wide one is used,
#    or the installer will stop and prompt if there is no default. 

##### OPTIONAL non-LVM setup
## Required partitions, you MAY resize as appropriate
#part / --fstype $FSTYPE --size=2048 --grow --maxsize=10000 --ondisk=$DISK1 $ENC
#part swap --fstype swap --size=256 --grow --maxsize=512 --ondisk=$DISK1 $ENC
#part /var/log --fstype $FSTYPE --size=200 --grow --maxsize=2048 --ondisk=$DISK1 --fsoptions="defaults,nodev,noexec,nosuid" $ENC

### Optional partitions, you MAY (de)activate and resize as appropriate
#part /home --fstype $FSTYPE --size=50 --grow --ondisk=$DISK1 --fsoptions="defaults,nodev"
##part /tmp --fstype $FSTYPE --size=200 --ondisk=$DISK1 --fsoptions="defaults,nodev,noexec,nosuid"
##part /var/log/audit --fstype $FSTYPE --size=1000 --ondisk=$DISK1 --fsoptions="defaults,nodev,noexec,nosuid"
##part /var --fstype $FSTYPE --size=400 --ondisk=$DISK1

"

# TODO append "no-scroll fbcon=scrollback:0" instead of fiddling with the
# boot loaders manually in cc-config
if [ -n "$EFI" ]
then
	echo "# Install boot loader on those platforms that need it
bootloader --driveorder=$DISK1 --location=partition --append="audit=1"
"
else
	echo "# Install boot loader on those platforms that need it
@@i386@@ bootloader --location=mbr --append="audit=1"
@@i386-WS@@ bootloader --location=mbr --append="audit=1"
@@x86_64@@ bootloader --location=mbr --append="audit=1"
@@ppc64@@ bootloader --location=partition --append="audit=1"
@@s390x@@ bootloader --location=mbr --append="audit=1"
"
fi

}

# save TTY settings and file descriptors and redirect i/o to tty
#FIXME, doesn't work in busybox sh#exec 10<&0 11>&1 12>&2
#FIXME, doesn't work in busybox sh#exec </dev/tty >/dev/tty 2>&1
# the following does not work on EFI systems
#STTY_SAVE=$(stty -g </dev/tty)
#stty sane </dev/tty
#reset </dev/tty >/dev/tty || clear >/dev/tty
clear >/dev/tty

echo_user "*** Common Criteria configuration kickstart ***"
echo_user

DISK_LIST="$(list-harddrives | sed 's/\([0-9]*\)\.*[0-9]*$/(\1 MB)/')"
DISKS_AVAILABLE="$(list-harddrives | cut -d' ' -f1)"

# Do we appear to have a network configured already?
IFACE=$(route -n 2>/dev/null | awk '/^0\.0\.0\.0/ {print $8}')
if [ ! -z "$IFACE" ]
then
	# use current network settings as defaults
	NAME=$(hostname)
	expr $NAME : localhost >/dev/null && {
		NAME="rhel.example.com"
	}
	IP=$(ifconfig $IFACE | sed -n 's/.*inet addr:\([^ ]*\).*/\1/p')
	MASK=$(ifconfig $IFACE | sed -n 's/.*Mask:\([^ ]*\).*/\1/p')
	GATE=$(route -n | awk '/^0\.0\.0\.0/ {print $2}')
	DNS=$(echo $(awk '/^nameserver/ {print $2}' </etc/resolv.conf) | sed 's/ /,/g')
else
	# pick up defaults from command line args
	IFACE=$(cmdline_val "ksdevice" "eth0")
	NAME=$(cmdline_val "hostname" "rhel.example.com")
	IP=$(cmdline_val ip)
	MASK=$(cmdline_val "netmask" "255.255.255.0")
	GATE=$(cmdline_val "gateway")
	DNS=$(cmdline_val "dns")
fi

INSTSRC=$(cmdline_val "method" "cdrom")

# need both installation disk and IP address for noninteractive install
Interactive=""
DISKS_INST=$(cmdline_val "instdisk")
[ -z "$DISKS_INST" ] && {
	# set the default disk to the first one, interactive mode
	DISKS_INST=$(echo "$DISKS_AVAILABLE" | head -1)
	Interactive="y"
}
[ -z "$IP" ] && Interactive="y"

## FIXME: pick appropriate physical name?
PV_ID=42001

# Pick an unused volume group name
VgNum=00
while true
do
        VGNAME=$(printf VolGroup%02d $VgNum)
	lvm vgscan 2>/dev/null | grep $VGNAME || break
	VgNum=$(($VgNum + 1))
done
echo_user "Using volume group '$VGNAME'."

if [ "$Interactive" ]
then
	while true
	do
		echo_user "(Answer '!' at any prompt to get an interactive shell)"
		INSTSRC="$(ask "Installation source" "$INSTSRC")"
		
		echo_user
		echo_user "Available destination disks:"
		echo_user "$DISK_LIST"
		DISKS_INST=$(ask "Install on which disk(s), comma separated" "$DISKS_INST")

		for DISK in $(echo $DISKS_INST | sed 's/,/ /g')
		do
			echo "$DISKS_AVAILABLE" | grep -q "^$DISK\$" || {
				echo "WARNING: can't find $DISK in list of available disks"
			}
		done

		EFI=""
		confirm "Does the current system have an (U)EFI BIOS? (y/n)" "n" && EFI="y"

		# RHEL5 specific questions
		$(uname -r | grep -q 2.6.18) &&
		{
			echo_user
			echo_user "Please provde installation key -- required for KVM packages"
			echo_user "An empty string implies that no key is provided."
			echo_user "In such a case, the KVM components cannot be installed with kickstart."
			KEY=$(ask "Installation key" "")
		}

		# RHEL6 specific questions
		$(uname -r | grep -q 2.6.32) &&
		{
			FIPS_ENABLED=$(cmdline_val "fips" "0")
			ENCTYPE="256 bit AES-XTS plain64 IV with SHA-1"
			[ "$FIPS_ENABLED" = "1" ] && ENCTYPE="FIPS 140-2 compliant 256 bit AES-XTS plain64 IV with SHA-1"
			echo_user
			echo_user "Disk encryption uses LUKS key setup with"
			echo_user "$ENCTYPE"
			confirm "Encrypt all partitions (except /boot)?" "n" && ENC="--encrypt"
		}

		[ ."$ENC" = ."--encrypt" ] && {
			LIM=256
			index=0
			echo_user "Before generating a cryptographic strong key, we need $LIM key strokes."
			echo_user "Please type random characters (do not simply hold down one key)."
			echo_user "WARNING: This operation only adds entropy when performed on the"
			echo_user "local console. If you access the installation system remotely, such as"
			echo_user "via serial console or network, you MUST generate an equal amount of"
			echo_user "interrupts locally to fill the entropy pool of the Linux kernel."
			echo_user "Only with sufficient amount of entropy, the master key for the"
			echo_user "disk encryption considered to be strong."
			echo_user "See ECG document, section \"Hard disk encryption\" for more information."
			while IFS= read -r -n1 char
			do
				index=$(($index+1))
				[ "$index" -ge $LIM ] && break
				delta=$(($LIM-$index))
				echo_user " - $delta key strokes needed"
			done
			echo_user "Press Enter to continue ..."
			read -r discarded
		}

		NAME=$(ask "Hostname (fully qualified)" "$NAME")
		IFACE=$(ask "Network interface" "$IFACE")
		IP=$(ask "IP address" "$IP")
		MASK=$(ask "Netmask" "$MASK")
		GATE=$(ask "Gateway" "$GATE")

		[ ."$GATE" = ."$IP" ] && echo_user "Warning: gateway address same as own IP address?!"
		
		DNS=$(ask "Nameserver list (comma separated)" "$DNS")

		[ -z $KEY ] && KEY="--skip"
		echo "key $KEY" > /tmp/cc-key.cfg

		gen_network > /tmp/cc-network.cfg
		gen_instsrc > /tmp/cc-instsrc.cfg

		if ! expr "$DISKS_INST" : "manual" >/dev/null
		then
			gen_partitioning > /tmp/cc-disks.cfg
		fi

		confirm "Manually edit partitioning instructions" "n" && {
			vi /tmp/cc-disks.cfg </dev/tty >/dev/tty 2>&1
			DISKS_INST="manually configured partitions"
		}

		echo_user
		echo_user "--- WARNING -------------------------------------------------"
		echo_user "This is your last chance to stop the installation. Continuing"
		echo_user "will erase the destination disk and install noninteractively."
		echo_user "Answer 'n' if you need to edit your settings."

		confirm "Okay to proceed with install on $DISKS_INST" n && break
	done
else
	# noninteractive
	gen_network > /tmp/cc-network.cfg
	gen_instsrc > /tmp/cc-instsrc.cfg
	gen_partitioning > /tmp/cc-disks.cfg
fi
# restore file descriptors and TTY
clear >/dev/tty
# this does not work on EFI
#stty $STTY_SAVE </dev/tty
#FIXME, doesn't work in busybox sh#exec <&10 >&11 2>&12

